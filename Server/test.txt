import { Request, Response } from 'express';
import Workout, { IWorkout } from '../models/workoutModels';
import mongoose from 'mongoose';

// Get all workouts
export const getWorkouts = async (req: Request, res: Response): Promise<void> => {
    const user_id = req.user._id;
    try {
        const workouts: IWorkout[] = await Workout.find({ user_id }).sort({ createdAt: -1 });
        res.status(200).json(workouts);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Get a single workout
export const getWorkout = async (req: Request, res: Response): Promise<void> => {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({ error: 'No such workout' });
    }
    try {
        const workout: IWorkout | null = await Workout.findById(id);
        if (!workout) {
            return res.status(404).json({ error: 'No such workout' });
        }
        res.status(200).json(workout);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Post a workout
export const createWorkout = async (req: Request, res: Response): Promise<void> => {
    const { title, load, reps } = req.body;
    const emptyFields: string[] = [];

    if (!title) {
        emptyFields.push('title');
    }
    if (!load) {
        emptyFields.push('load');
    }
    if (!reps) {
        emptyFields.push('reps');
    }
    if (emptyFields.length > 0) {
        return res.status(400).json({ error: 'Please fill in all the fields', emptyFields });
    }

    try {
        const user_id = req.user._id;
        const workout: IWorkout = await Workout.create({ title, load, reps, user_id });
        res.status(200).json(workout);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Delete a workout
export const deleteWorkout = async (req: Request, res: Response): Promise<void> => {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({ error: 'No such workout' });
    }
    try {
        const workout: IWorkout | null = await Workout.findOneAndDelete({ _id: id });
        if (!workout) {
            return res.status(404).json({ error: 'No such workout' });
        }
        res.status(200).json(workout);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Patch a workout
export const updateWorkout = async (req: Request, res: Response): Promise<void> => {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({ error: 'No such workout' });
    }
    try {
        const workout: IWorkout | null = await Workout.findOneAndUpdate({ _id: id }, {
            ...req.body
        });
        if (!workout) {
            return res.status(404).json({ error: 'No such workout' });
        }
        res.status(200).json(workout);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};
